buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'com.bmuschko.docker-remote-api' version '3.2.5'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

group = 'code.project'

version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile group: 'javax.inject', name: 'javax.inject', version: '1'

    compile('org.hsqldb:hsqldb')
}


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

def PROJECT_NAME = project.name.toLowerCase()

task copyJar(type: Copy) {
    dependsOn assemble
    from file('build/libs/')
    into 'build/docker'
}

task stopDocker(type: DockerStopContainer) {
    targetContainerId { PROJECT_NAME }
    // ignore exception if container does not exist otherwise throw it
    onError { exception ->
        if (exception != null && exception.message != null && !exception.message.contains('No such container')) {
            throw exception
        }
    }
}

task removeDocker(type: DockerRemoveContainer) {
    dependsOn stopDocker
    targetContainerId { PROJECT_NAME }
    // ignore exception if container does not exist otherwise throw it
    onError { exception ->
        if (exception != null && exception.message != null && !exception.message.contains('No such container')) {
            throw exception
        }
    }
}

task createDockerfile(type: Dockerfile) {
    dependsOn copyJar
    group = 'Docker'
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:8-jre-alpine'
    copyFile jar.archiveName, '/app/' + jar.archiveName
    entryPoint 'java'
    defaultCommand '-jar', '/app/' + jar.archiveName
    exposePort 8080
}

task buildImage(type: DockerBuildImage) {
    group = 'Docker'
    dependsOn createDockerfile
    inputDir =  createDockerfile.destFile.parentFile
    tag = PROJECT_NAME
}

task createDocker(type: DockerCreateContainer) {
    dependsOn buildImage
    dependsOn removeDocker
    targetImageId { buildImage.getImageId() }

    containerName = PROJECT_NAME
    portBindings = ['8080:8080']
}

task startApp(type: DockerStartContainer) {
    dependsOn createDocker
    targetContainerId { PROJECT_NAME }
}
